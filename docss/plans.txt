so veri fact is selected ,these were plans we created , AI Fact‑Checker Bot

Theme: Reliable Knowledge – Fact-Checking & Research

Problem Statement: Misinformation spreads rapidly; users lack tools to verify claims in text or social media.

Solution Overview: A Retrieval-Augmented chatbot ingests user text, identifies factual assertions, and cross-checks them against credible sources, returning verdicts with evidence links.

Key Features:

Claim Extraction: NLP model to detect and parse statements

Document Retrieval: RAGatouille pipeline to fetch from NewsAPI, Wikipedia, fact-check databases

Evidence Synthesis: LangChain to construct prompts combining retrieved snippets + LLM for verdict

Citation Display: Highlight source passages and URLs in chat

Web UI: Input box + chat interface with flag/warning indicators

Tech Stack & Resources:

Model: OpenAI GPT-3.5/GPT-4 (or local LLaMA via llama.cpp)

RAG Framework: LangChain or Haystack

Sources: NewsAPI.org, Google Fact Check, Wikipedia API

Backend: Python (FastAPI)

Frontend: Vue.js or React

Deployment: Heroku or Vercel

Prototype Plan (3 weeks):

Claim detection + simple chat UI (Week 1)

RAG retrieval from Wikipedia + snippet integration (Week 2)

Full API integration (NewsAPI, Fact Check), UI polish (Week 3)

Impact: Empowers users with on-demand fact verification, combats viral misinformation effectively.# VeriFact: Real-Time AI Fact-Checker Powered by RAG

**Submission Theme:** Reliable Knowledge – Fact-Checking & Research
**Hackathon:** DeepDive 1.0 – Round 2: Idea Submission

---

## The Problem: Verifying Information in a Noisy World

The constant stream of content across social media and digital news platforms increases exposure to misinformation. Readers often encounter viral claims without a convenient way to verify them. Manual fact-checking is time-intensive and inaccessible for most users.

---

## My Idea: VeriFact – Fast, Cited, AI-Based Verification

VeriFact is a real-time AI chatbot that identifies and verifies factual claims in user-submitted content. Using Retrieval-Augmented Generation (RAG), it analyzes the input, searches reliable sources such as Wikipedia and news APIs, and returns a concise verdict backed by references.

---

## Problem Statement

Misinformation spreads rapidly online due to a lack of immediate, accessible verification tools. Users need a simple way to check the accuracy of factual statements in real time without manually searching across multiple sources.

---

## Proposed Solution

VeriFact provides:

Input field for tweets, headlines, or text snippets
Automatic detection of claims using NLP
Retrieval of contextual evidence using APIs from Wikipedia, news sources, and fact-checking databases
Language model-based verdicts with visible source citations
Highlighted warnings when evidence is weak, contradictory, or missing

### Key Features

* Named Entity and Claim Extraction
* LangChain-driven RAG pipeline using FAISS or Chroma vector storage
* GPT-4 or local llama.cpp-based reasoning engine
* Web-based chat interface with multi-turn support and evidence display

---

## Technology Stack

* **Frontend:** React.js or Vue.js (for the verification UI)
* **Backend:** FastAPI (Python)
* **LLM Engine:** GPT-4 or LLaMA 3 via llama.cpp
* **Retrieval System:** LangChain with Wikipedia API, NewsAPI.org, and Google Fact Check Tools
* **Deployment:** Heroku, Vercel, or HuggingFace Spaces

---

---

## Impact

* Makes fact-checking accessible and instant for any reader or user
* Encourages responsible content sharing by offering real-time evidence
* Scales across use cases including journalism, social media, and education

---i have till 11 pm 11th july time now we will implement so technical talks of what we are doing how we will use ragatouille and other tech related things on what we discused after completion i will myself make the ppt and video .so we will create the thing also if you want context you can read our conversation that happened as well.
